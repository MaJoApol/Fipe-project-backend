// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  birthdate  DateTime? @db.Date
  contact    String?
  nationalId String    @unique
  email      String    @unique
  password   String     
  token      String?   @unique

  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now()) 
  updatedAt  DateTime? 
  deletedAt  DateTime? 

  createdById  String?    @db.Uuid             
  createdBy    Users?     @relation("createdUsers",fields: [createdById], references: [id])   
  
  updatedById  String?    @db.Uuid
  updatedBy    Users?     @relation("updatedUsers",fields: [updatedById], references: [id])   

  deletedById  String?    @db.Uuid
  deletedBy    Users?     @relation("deletedUsers",fields: [deletedById], references: [id]) 

  createdUsers Users[] @relation("createdUsers")
  updatedUsers Users[] @relation("updatedUsers")
  deletedUsers Users[] @relation("deletedUsers")

  createdFuelTypes FuelTypes[] @relation("createdFuelTypes")
  updatedFuelTypes FuelTypes[] @relation("updatedFuelTypes")
  deletedFuelTypes FuelTypes[] @relation("deletedFuelTypes")

  createdBrands Brands[] @relation("createdBrands")
  updatedBrands Brands[] @relation("updatedBrands")
  deletedBrands Brands[] @relation("deletedBrands")

  createdModels Models[] @relation("createdModels")
  updatedModels Models[] @relation("updatedModels")
  deletedModels Models[] @relation("deletedModels")

  createdVehicles Vehicles[] @relation("createdVehicles")
  updatedVehicles Vehicles[] @relation("updatedVehicles")
  deletedVehicles Vehicles[] @relation("deletedVehicles")

}

model FuelTypes{
  id      String       @id @default(uuid()) @db.Uuid
  name    String
  abbreviation String

  isDeleted    Boolean   @default(false) 
  createdAt    DateTime  @default(now())      
  updatedAt    DateTime? 
  deletedAt    DateTime? 

  createdById  String?    @db.Uuid             
  createdBy    Users?     @relation("createdFuelTypes", fields: [createdById], references: [id])   
  
  updatedById  String?    @db.Uuid
  updatedBy    Users?     @relation("updatedFuelTypes", fields: [updatedById], references: [id])   

  deletedById  String?    @db.Uuid
  deletedBy    Users?     @relation("deletedFuelTypes", fields: [deletedById], references: [id])   

  vehicles   Vehicles[]
}

model Brands{
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  fipeCode   String?

  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now()) 
  updatedAt  DateTime? 
  deletedAt  DateTime? 

  createdById  String?    @db.Uuid             
  createdBy    Users?     @relation("createdBrands", fields: [createdById], references: [id])   
  
  updatedById  String?    @db.Uuid
  updatedBy    Users?     @relation("updatedBrands", fields: [updatedById], references: [id])   

  deletedById  String?    @db.Uuid
  deletedBy    Users?     @relation("deletedBrands", fields: [deletedById], references: [id])   

  models   Models[]
}

model Models{
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid 
  name      String
  fipeCode  String? 
  brandId  String     @db.Uuid 
  
  brands    Brands     @relation(fields: [brandId], references: [id])    

  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now()) 
  updatedAt  DateTime? 
  deletedAt  DateTime? 

  createdById  String?    @db.Uuid             
  createdBy    Users?     @relation("createdModels", fields: [createdById], references: [id])   
  
  updatedById  String?    @db.Uuid
  updatedBy    Users?     @relation("updatedModels", fields: [updatedById], references: [id])   

  deletedById  String?    @db.Uuid
  deletedBy    Users?     @relation("deletedModels", fields: [deletedById], references: [id])   

  vehicles   Vehicles[]

}

model Vehicles{
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fipeCode       String? 
  value          Int
  referenceMonth Int 
  referenceYear  Int
  vehicleYear    Int    @unique

  modelId        String    @db.Uuid    
  model          Models?    @relation(fields: [modelId], references: [id])

  fuelTypeId     String     @db.Uuid    
  fuelType       FuelTypes? @relation(fields: [fuelTypeId], references: [id])

  isDeleted    Boolean   @default(false)      
  createdAt    DateTime  @default(now())     
  updatedAt    DateTime? 
  deletedAt    DateTime? 

  createdById  String?    @db.Uuid             
  createdBy    Users?     @relation("createdVehicles", fields: [createdById], references: [id])   
  
  updatedById  String?    @db.Uuid
  updatedBy    Users?     @relation("updatedVehicles", fields: [updatedById], references: [id])   

  deletedById  String?    @db.Uuid
  deletedBy    Users?     @relation("deletedVehicles", fields: [deletedById], references: [id])   

}

